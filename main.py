!pip install -U transformers bitsandbytes>=0.39.0 -q

!pip install pyTelegramBotAPI

!pip install -U deep-translator -q

from deep_translator import GoogleTranslator

!pip install accelerate
!pip install -i https://pypi.org/simple/ bitsandbytes

!pip install g4f -q

!pip install diffusers -q

import g4f
from g4f.Provider import Bing, OpenaiChat, Liaobots, BaseProvider
from g4f.cookies import set_cookies
from g4f.client import Client
from deep_translator import GoogleTranslator
import nest_asyncio

nest_asyncio.apply()

from transformers import AutoModelForCausalLM
from transformers import AutoTokenizer
from transformers import set_seed
import torch
name = 'facebook/opt-350m'
name1 = "mistralai/Mistral-7B-Instruct-v0.1"
name2 = "HuggingFaceH4/zephyr-7b-alpha"
name3 = 'openchat/openchat_3.5'
#, device_map="auto", load_in_4bit=True)
tokenizer_ = AutoTokenizer.from_pretrained(name2)
model = AutoModelForCausalLM.from_pretrained(name2, device_map='auto', load_in_4bit=True)
#'—ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è name2 - load_in_4bit=True

conversation_history = [{"role": "user", "content": ""},
{"role": "assistant", "content": ""}]

def getResponse(text):
    set_seed(0)
    conversation_history.append({'role': 'user', 'content': text})
    
    model_inputs = tokenizer_.apply_chat_template(conversation_history[-40:], add_generation_prompt=True, return_tensors="pt").to("cuda")
    input_length = model_inputs.shape[1]
    #model_inputs['history'] = history_inputs # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –º–æ–¥–µ–ª—å
    generated_ids = model.generate(model_inputs, do_sample=True, max_new_tokens=1024)
    #response = tokenizer.decode(generated_ids[:, model_inputs.input_ids.shape[-1]:][0], skip_special_tokens=True)
    response = tokenizer_.batch_decode(generated_ids[:, input_length:], skip_special_tokens=True)[0]
    conversation_history.append({'role': 'assistant', 'content': response})
    return response

import telebot
from telebot import types
bot = telebot.TeleBot('6639659099:AAFD0JW9M9v-8jhzXmTU1ZfFif2UabtDD-g')

facts = ['–í–æ–∏–Ω—ã-–≥—É–Ω–Ω—ã –ø–æ–¥ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –ê—Ç—Ç–∏–ª—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –º—è—Å–∞: –µ–≥–æ –ø–æ–º–µ—â–∞–ª–∏ –ø–æ–¥ —Å–µ–¥–ª–æ –ª–æ—à–∞–¥–∏. –í–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä—Ö–æ–≤–æ–π –µ–∑–¥—ã –º—è—Å–æ —Ç–µ—Ä—è–ª–æ –∂–∏–¥–∫–æ—Å—Ç—å –∏ –æ—Ç–±–∏–≤–∞–ª–æ—Å—å, –∞ –∫—Ä–æ–º–µ —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å–∞–ª–∏–≤–∞–ª–æ—Å—å –æ—Ç –ª–æ—à–∞–¥–∏–Ω–æ–≥–æ –ø–æ—Ç–∞',
         '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ ¬´–¶—ã–ø–ª—ë–Ω–æ–∫ —Ç–∞–±–∞–∫–∞¬ª –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–∞–±–∞–∫–æ–º. –û–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´—Ç–∞–ø–∞–∫–∞¬ª',
         '–ù–∞ –æ—Å—Ç—Ä–æ–≤–µ –°–∞—Ä–¥–∏–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π —Å–æ—Ä—Ç —Å—ã—Ä–∞ ¬´–ö–∞—Å—É –º–∞—Ä—Ü—É¬ª. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–µ–ª–∏–∫–∞—Ç–µ—Å –ø–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è –≥–Ω–∏–µ–Ω–∏—é, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø–∞–¥–∞ –∂–∏—Ä–æ–≤ —É—Å–∫–æ—Ä—è—é—Ç –ª–∏—á–∏–Ω–∫–∏ —Å—ã—Ä–Ω–æ–π –º—É—Ö–∏',
         '–í —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–º –≤–µ–∫–µ –º–æ—Ä–µ–ø–ª–∞–≤–∞—Ç–µ–ª—è–º–∏ –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –ì–∞–ª–∞–ø–∞–≥–æ—Å—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —á–µ—Ä–µ–ø–∞—Ö–∏. –í —Ç–æ –≤—Ä–µ–º—è —Ä–∞—Ü–∏–æ–Ω –º–æ—Ä—è–∫–æ–≤ –±—ã–ª –æ—á–µ–Ω—å —Å–∫—É–¥–Ω—ã–º –∏ —Å–æ—Å—Ç–æ—è–ª –∏–∑ —Å–æ–ª–æ–Ω–∏–Ω—ã –∏ —Å—É—Ö–∞—Ä–µ–π. –ü–æ—ç—Ç–æ–º—É —á–µ—Ä–µ–ø–∞—Ö —Å—Ç–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ ¬´–∂–∏–≤—ã—Ö –∫–æ–Ω—Å–µ—Ä–≤–æ–≤¬ª',
         '–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è —Å–ª–∞–≤–∏—Ç—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∏–∫–∞—Ç–µ—Å–∞–º–∏. –û—Å–æ–±–æ–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –∑–∞–Ω–∏–º–∞–µ—Ç —Ä—ã–±–∞ —Ñ—É–≥—É. –ù–æ –º–∞–ª–µ–π—à–∞—è –æ–ø–ª–æ—à–Ω–æ—Å—Ç—å –ø—Ä–∏ –µ—ë –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —É –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–∞ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ',
         '–í –ê–Ω–≥–ª–∏–∏ XVI –≤–µ–∫–∞ —Å–∞–º—ã–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–º –±–ª—é–¥–æ–º —Å—Ä–µ–¥–∏ –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏–∏ –∏ –∑–æ–ª–æ—Ç–æ–π –º–æ–ª–æ–¥—ë–∂–∏ –±—ã–ª ¬´–ø–∏—Ä–æ–≥ —Å —Å—é—Ä–ø—Ä–∏–∑–æ–º¬ª. –ö–æ–≥–¥–∞ —Ç–∞–∫–æ–π –ø–∏—Ä–æ–≥ —Ä–∞–∑—Ä–µ–∑–∞–ª–∏ –Ω–∞ –∑–∞—Å—Ç–æ–ª—å—è—Ö –ø–µ—Ä–µ–¥ –≥–æ—Å—Ç—è–º–∏, –∏–∑ –Ω–µ–≥–æ –≤—ã–ª–µ—Ç–∞–ª–∏ –∂–∏–≤—ã–µ –ø—Ç–∏—Ü—ã',
         '–°—ã—Ä –ø—Ä–∏–∑–Ω–∞–Ω —Å–∞–º–æ–π –∂–µ–ª–∞–Ω–Ω–æ–π –µ–¥–æ–π –¥–ª—è –≤–æ—Ä–æ–≤ –≤–æ –≤—Å—ë–º –º–∏—Ä–µ. –ï–≥–æ –∫—Ä–∞–¥—É—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–∞—â–µ –≤—Å–µ–≥–æ',
         '–î–æ 2011 –≥–æ–¥–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç–Ω–æ—Å–∏–ª–æ –ø–∏–≤–æ –∏ –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ 10 –≥—Ä–∞–¥—É—Å–æ–≤, –∫ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–º',
         '–ë–∞–Ω–∞–Ω—ã, –∫–∞–∫ –∏ –∞—Ä–±—É–∑—ã, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è–≥–æ–¥—ã',
         '–°—ç–Ω–¥–≤–∏—á –±—ã–ª –∏–∑–æ–±—Ä–µ—Ç—ë–Ω —á–µ–ª–æ–≤–µ–∫–æ–º –ø–æ –∏–º–µ–Ω–∏ –≠—Ä–ª –°—ç–Ω–¥–≤–∏—á. –û–Ω –±—ã–ª –∑–∞—è–¥–ª—ã–º –∏–≥—Ä–æ–∫–æ–º –≤ –ø–æ–∫–µ—Ä –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–ª—Å—è –≤—Å—Ç–∞–≤–∞—Ç—å –∏–∑-–∑–∞ –∏–≥—Ä–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ —Ä–∞–¥–∏ –µ–¥—ã',
         '–í—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –º–æ–∂–µ—Ç–µ —É—Å–ª—ã—à–∞—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ä–µ–≤–µ–Ω—å. –ó–≤—É–∫ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–∑-–∑–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –±—É—Ç–æ–Ω–æ–≤',
         '–ë–æ–ª—å—à–æ–π –º–µ—à–æ–∫ —Å —Ñ–∏—Å—Ç–∞—à–∫–∞–º–∏ (–∫–∞–∫ –∏ –ª—é–±–æ–µ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏—Ö –æ—Ä–µ—Ö–æ–≤) –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–≥–æ—Ä–µ—Ç—å—Å—è',
         '–ò–∑ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–≥–æ –º–∞—Å–ª–∞ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã –∏ —Å–Ω–µ–∫–∏, –Ω–æ –∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç—ã',
         '–ì—Ä–∏–±—ã –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≥–æ—Ç–æ–≤–∏—Ç—å',
         '–ì—Ä–æ–º–∫–∞—è –º—É–∑—ã–∫–∞ –º–æ–∂–µ—Ç –∑–∞—Å—Ç–∞–≤–∏—Ç—å –≤–∞—Å –ø–∏—Ç—å –±–æ–ª—å—à–µ –∏ —á–∞—â–µ',
         '–õ–æ–±—Å—Ç–µ—Ä—ã –∏ —É—Å—Ç—Ä–∏—Ü—ã –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª–∏ –µ–¥–æ–π –ø—Ä–æ–ª–µ—Ç–µ—Ä–∏–∞—Ç–∞',
         '–ù–∞–∫–ª–µ–π–∫–∏ –Ω–∞ —Ñ—Ä—É–∫—Ç–∞—Ö –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å—ä–µ–¥–æ–±–Ω—ã. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–∞—é—Ç, –≤—Å–µ –Ω–∞–∫–ª–µ–π–∫–∏ –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∏–∑ –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –µ—Å—Ç—å. –ò –∫–ª–µ–π –Ω–∞ —Å—Ç–∏–∫–µ—Ä–µ –ø—Ä–∏–≥–æ–¥–µ–Ω –≤ –ø–∏—â—É. –ü–æ–¥–æ–±–Ω—É—é –±—É–º–∞–≥—É –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–∞–∫–∂–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–æ—Ä—Ç–æ–≤',
         '–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç –î–∂–æ–Ω–Ω –Ø–Ω–≥ –≤ 1965 –≥–æ–¥—É —É—Ä–æ–Ω–∏–ª —Å—ç–Ω–¥–≤–∏—á —Å –±–æ–±–∞–º–∏ –∏ –≥–æ–≤—è–¥–∏–Ω–æ–π –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ—Å–º–æ—Å',
         '–ï—Å–ª–∏ –±—ã –Ω–µ –±—ã–ª–æ –º—É—Ö, –Ω–µ –±—ã–ª–æ –±—ã —à–æ–∫–æ–ª–∞–¥–∞. –ó–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–µ–µ –≤ –∂–∏–∑–Ω–∏ –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å. –®–æ–∫–æ–ª–∞–¥–Ω—ã–µ –º–æ—à–∫–∏ –∏–∑–¥–∞–≤–Ω–∞ –ª—é–±—è—Ç –æ–ø—ã–ª—è—Ç—å –∫–∞–∫–∞–æ-–¥–µ—Ä–µ–≤—å—è, –∏ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç –ø—ã–ª—å—Ü—É —Å –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–µ. –ö–æ–≥–¥–∞ –∫–∞–∫–∞–æ-–±–æ–±—ã —Å–æ–±–∏—Ä–∞—é—Ç, —á–∞—Å—Ç–∏—á–Ω–æ –≤ —É—Ä–æ–∂–∞–π –ø–æ–ø–∞–¥–∞—é—Ç –∏ –Ω–∞—Å–µ–∫–æ–º—ã–µ',
         '–í —Å—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞ –∂–≥—É—á–∏–π –ø–µ—Ä–µ—Ü –±—ã–ª –Ω–∞—Å—Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏–º –∏ —Ü–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º, —á—Ç–æ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –Ω–∞–ª–æ–≥–æ–≤']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏')
    btn2 = types.KeyboardButton('–§–∞–∫—Ç—ã')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, 'üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Recipe Generator Bot!\n\n'
                     + '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n\n'
                     + '- –ø–æ—á–∏—Ç–∞—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n'
                     + '- —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –∫—É–ª–∏–Ω–∞—Ä–∏–∏\n'
                     + '- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤(—á—Ç–æ–±—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç,–Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ä–µ—Ü–µ–ø—Ç –∏–∑ (–∏–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã))"\n\n'
                     + '–ù–∞—á–∏–Ω–∞–µ–º! (–≤—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–∏–∑—É —Ç—É –∫–Ω–æ–ø–∫—É, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç)', reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–∫—Ç–æ–≤
def send_fact(message):
    bot.send_message(message.from_user.id, 'üëÄ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ –º–∏—Ä–∞ –∫—É–ª–∏–Ω–∞—Ä–∏–∏:\n\n' + random.choice(facts))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
def send_news(message):
    news_links = (
        '[–ì–∞—Å—Ç—Ä–æ–Ω–æ–º—ä](https://www.gastronom.ru/new)\n'
        '[–ü–æ–≤–∞—Ä–µ–Ω–æ–∫.—Ä—É](https://www.povarenok.ru/news/)\n'
        '[–ï–¥–∏–º –î–æ–º–∞](https://www.edimdoma.ru/news/posts)\n'
        '[–î–æ–º–∞—à–Ω—è—è –ö—É–ª–∏–Ω–∞—Ä–∏—è](https://dom-eda.com/blog/news/)'
    )
    bot.send_message(message.from_user.id, 'üì∞ –ü–æ—á–∏—Ç–∞—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ —Å—Å—ã–ª–∫–∞–º\n' + news_links)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text in ['–§–∞–∫—Ç—ã', '–ù–æ–≤–æ—Å—Ç–∏'])
def handle_button_message(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–¥–µ—Å—å
    if message.text == '–§–∞–∫—Ç—ã':
        send_fact(message)
    elif message.text == '–ù–æ–≤–æ—Å—Ç–∏':
        send_news(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    try:
        response_text = getResponse(message.text)
        prediction = GoogleTranslator(source='auto', target='ru').translate(response_text)
        bot.send_message(message.from_user.id, prediction)
    except Exception as e:
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

import random
from diffusers import DiffusionPipeline
import torch

class RecipeGeneratorBot:
    def __init__(self):
        self.ingredients = []
        self.preferences = []

    def add_ingredient(self, ingredient):
        self.ingredients.append(ingredient)

    def add_preference(self, preference):
        self.preferences.append(preference)

    def generate_recipe(self):
        if not self.ingredients:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç."

        if not self.preferences:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π' –∏–ª–∏ '–º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–π')."

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        recipe = "–í–∞—à —Ä–µ—Ü–µ–ø—Ç:\n"
        recipe += "–®–∞–≥ 1: –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ " + random.choice(self.ingredients) + ".\n"
        recipe += "–®–∞–≥ 2: " + random.choice(["–î–æ–±–∞–≤—å—Ç–µ", "–°–º–µ—à–∞–π—Ç–µ"]) + " " + random.choice(self.ingredients) + ".\n"
        recipe += "–®–∞–≥ 3: " + random.choice(["–ü–æ–¥–∞–≤–∞–π—Ç–µ", "–£–∫—Ä–∞—Å—å—Ç–µ"]) + " —Å " + random.choice(self.preferences) + " —Å–æ—É—Å–æ–º."
            
        return recipe

def send_photo(message):
    base = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-base-1.0",
        torch_dtype=torch.float16,
        variant="fp16",
        use_safetensors=True
    )
    base.to("cuda")
    
    refiner = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-refiner-1.0",
        text_encoder_2=base.text_encoder_2,
        vae=base.vae,
        torch_dtype=torch.float16,
        use_safetensors=True,
        variant="fp16"
    )
    refiner.to("cuda")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥–æ–º —ç–∫—Å–ø–µ—Ä—Ç–µ (80/20)
    n_steps = 40
    high_noise_frac = 0.8
    prompt = message
    
    image = base(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_end=high_noise_frac,
        output_type="latent"
    ).images
    
    image = refiner(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_start=high_noise_frac,
        image=image,
    ).images[0]
    
    return image

bot.polling(none_stop=True, interval=0)
